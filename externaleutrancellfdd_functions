#************************************************************#
#                                                            #
#      Function definition for externaleutrancellfdd         #
#                                                            #
#************************************************************#

#*************************************#
#       variables declaration         #
#*************************************#

$eutranwldn = ENodeBFunction=1,EUtraNetwork=1

#*************************************#
#       functions declaration         #
#*************************************#

func fetchxtwolistfile
	$linecontent = readfile($xtwolistfile)
	for $n = 1 to $nr_of_lines
		$source[$n] = $linecontent[$n] -s -.*
		$target[$n] = $linecontent[$n] -s .*-
		if $linecontent[$n] ~ [0-9]+[A-Z]+[^a-z]-[0-9]+[A-Z]+[^a-z]
			$xtwolistfileformatok = 1
		else
			$xtwolistfileformatok = 0
			break
		fi
	done
	$n = $nr_of_lines
endfunc

func xtwolistconfirm
	!cat $path/tmp/xtwolist.txt
	!echo '\n'
	for ever
		$xtwolistconfirm = readinput(y/n:)
		if $xtwolistconfirm ~ y || $xtwolistconfirm ~ n
			break		
		else
			!echo 'Please hit y(yes) or n(no)!'
		fi
	done
	if $xtwolistconfirm ~ y
		break
	else if $xtwolistconfirm ~ n
		!rm -r $path/tmp/xtwolist.txt
	fi
endfunc

func xtwolistfileexist
	!cat $path/tmp/x2listinp_file.txt
	for ever
		$xtwolistfile = readinput(path/filename:)
		$linecontent = testfile($xtwolistfile)
		if $nr_of_lines = 0
			$xtwolistfileformatok = 2
		else
			fetchxtwolistfile
		fi
		if $xtwolistfileformatok = 1
			!cp $xtwolistfile $path/tmp/xtwolist.txt
			!cat $path/tmp/x2listconfirm.txt
			xtwolistconfirm
		else if $xtwolistfileformatok = 0
			!cat $path/tmp/fileformaterror.txt
		else if $xtwolistfileformatok = 2
			!cat $path/tmp/x2filelistnotfound.txt
		fi
	done
endfunc	

func manual		
	!cat $path/tmp/x2listinp_manual.txt
	for ever
		$n = $n + 1
		$termpointtoenb[$n] = readinput(TermPointToENB / f[finished]:)
		if $termpointtoenb[$n] ~ [0-9]+[A-Z]+[^a-z]-[0-9]+[A-Z]+[^a-z]
			!echo $termpointtoenb[$n] >> $path/tmp/xtwolist.txt
			$xtwolistfile = $path/tmp/xtwolist.txt
		else if $termpointtoenb[$n] ~ f
			!cat $path/tmp/x2listconfirm.txt
			xtwolistconfirm
		else
			!cat $path/tmp/badformat.txt
		fi
	done
	fetchxtwolistfile
endfunc

func input	
	!cat $path/tmp/input_method.txt
	for ever
		$inputmethod = readinput(y/n:)
		if $inputmethod ~ y
			xtwolistfileexist
			break
		else if $inputmethod ~ n
			manual
			break
		else
			!echo 'Please hit y(yes) or n(no)!'
		fi
	done
endfunc

func writesequence
	!rm -f $path/tmp/sequence.txt
	!echo '$sequence' >>					$path/tmp/sequence.txt
	!echo '$source[$sequence]' >>			$path/tmp/sequence.txt
	!echo '$target[$sequence]' >>			$path/tmp/sequence.txt
endfunc

func targetsub
	!monode $target[$sequence] 'run $externaleutrancellfdd_targetsub'
	$linecontent = testfile($path/tmp/targetcontactok[$sequence].txt)
	$targetcontactok = $nr_of_lines
	$linecontent = testfile($path/tmp/ratfoundtarget[$sequence].txt)
	$ratfoundtarget = $nr_of_lines
endfunc

func sourcesub
	!monode $source[$sequence] 'run  $externaleutrancellfdd_sourcesub'
	$linecontent = testfile($path/tmp/sourcecontactok[$sequence].txt)
	$sourcecontactok = $nr_of_lines
	$linecontent = testfile($path/tmp/ratfoundsource[$sequence].txt)
	$ratfoundsource = $nr_of_lines
endfunc

func displayresult
	!cat $path/tmp/finish.txt
	!cat $path/tmp/result.txt
	!cat $path/tmp/externaleutrancellfddalreadydefined.txt
	!cat $path/tmp/externaleutrancellfddresult.txt
endfunc

func fetchresult
	$linecontent = readfile($path/tmp/sourcedata[$sequence].txt)
	$xtwoldnsource = $linecontent[8]
	$xtwonotcreatedonsource = $linecontent[9]
	$xtwoopstsource = $linecontent[10]
	
	!monode $target[$sequence] 'run $externaleutrancellfdd_targetresultsub'
	$linecontent = readfile($path/tmp/targetresultdata[$sequence].txt)
	$xtwoldntarget = $linecontent[1]
	$xtwonotcreatedontarget = $linecontent[2]
	$xtwoopsttarget = $linecontent[3]
endfunc

func writeresult
	$xtwosource = $xtwoldnsource -s .*,
	$xtwotarget = $xtwoldntarget -s .*,
	!echo 'ENB1 X2_ENB1 X2_OPERSTATE_ENB1 ENB2 X2_ENB2 X2_OPERSTATE_ENB2 ' >> $path/tmp/result.txt
	if $targetcontactok = 0
		!echo 'ENB1-ENB2: $target[$sequence]-$source[$sequence]: NO CONTACT TO ENB2' >> $path/tmp/result.txt
	else if $ratfoundtarget = 0
		!echo 'ENB1-ENB2: $target[$sequence]-$source[$sequence]: NO LRAT FOUND ON ENB2' >> $path/tmp/result.txt
	else if $sourcecontactok = 0
		!echo 'ENB1-ENB2: $target[$sequence]-$source[$sequence]: NO CONTACT TO ENB1' >> $path/tmp/result.txt
	else if $ratfoundsource = 0
		!echo 'ENB1-ENB2: $target[$sequence]-$source[$sequence]: NO LRAT FOUND ON ENB1' >> $path/tmp/result.txt
	else if $xtwonotcreatedonsource = 1
		!echo 'ENB1-ENB2: $target[$sequence]-$source[$sequence] Warning: X2 CR FAIL on ENB1!' >> $path/tmp/result.txt	
	else if $xtwonotcreatedontarget = 1
		!echo 'ENB1-ENB2: $target[$sequence]-$source[$sequence]: $xtwoldnsource $xtwoopstsource Warning: X2 CRE-FAIL on target!' >> $path/tmp/result.txt
	else
		!echo '$source[$sequence] $xtwosource $xtwoopstsource $target[$sequence] $xtwotarget $xtwoopsttarget' >> $path/tmp/result.txt	
	fi
endfunc

func getsequence
	$lineContent = readfile($path/tmp/sequence.txt)
	$sequence =					$lineContent[1]
	$source[$sequence] =		$lineContent[2]
	$target[$sequence] =		$lineContent[3]
endfunc

func contactind_source
	!echo 'SOURCE CONTACT OK' >> $path/tmp/sourcecontactok[$sequence].txt
endfunc
	
func checkifenb_source
	pv $rats
	if $rats ~ L
		!echo 'LRAT FOUND SOURCE' >> $path/tmp/ratfoundsource[$sequence].txt
	else
		$return = 1
	fi
endfunc

func contactind_target
	!echo 'TARGET CONTACT OK' >> $path/tmp/targetcontactok[$sequence].txt
endfunc

func checkifenb_target
	pv $rats
	if $rats ~ L
		!echo 'LRAT FOUND TARGET' >> $path/tmp/ratfoundtarget[$sequence].txt
	else
		$return = 1
	fi
endfunc

func getdata
	get ^eNodeBFunction= enbid$ > $enbid
	get ^eNodeBFunction= plmnid$ > $plmnid
	get ^eNodeBFunction= ^sctpX2Ref$ > $sctpendpointRef
	if $sctpendpointRef ~ 0
		get ^eNodeBFunction= ^sctpRef$ > $sctpendpointRef
	fi
	
	ma xtwolocalipaddress $sctpendpointRef localIpAddress
	for $mo in xtwolocalipaddress
		$xtwolocalipaddressldn = ldn($mo)
	done
	
	get $xtwolocalipaddressldn ^address$ > $inneraddress
	$inneraddress = $inneraddress -s /.*
	
	mr eutrancellfdd
	ma eutrancellfdd ^eutrancellfdd=
	for $mo in eutrancellfdd
		$i = $i + 1
		$eutrancellfddrdn = rdn($mo)
		get $eutrancellfddrdn ^cellId$ > $cellId[$i]
		get $eutrancellfddrdn ^physicalLayerCellIdGroup$ > $physicalLayerCellIdGroup[$i]
		get $eutrancellfddrdn ^physicalLayerSubCellId$ > $physicalLayerSubCellId[$i]
		get $eutrancellfddrdn ^tac$ > $tac[$i]
		get $eutrancellfddrdn ^earfcndl$ > $earfcndl[$i]
	done
endfunc

func writedata
	#$1 stands for target or source or targetresult
	#This function must be called with parameter $1
	if $1 = target
		!echo '$enbid'	>>								$path/tmp/$1data[$sequence].txt
		!echo '$plmnid[mcc]' >>							$path/tmp/$1data[$sequence].txt
		!echo '$plmnid[mnc]' >>							$path/tmp/$1data[$sequence].txt
		!echo '$plmnid[mncLength]' >>					$path/tmp/$1data[$sequence].txt
		!echo '$outeraddress' >>	 					$path/tmp/$1data[$sequence].txt
		!echo '$inneraddress' >>	 					$path/tmp/$1data[$sequence].txt
		#$i = number of cells	                                  
		!echo '$i' >>									$path/tmp/$1data[$sequence].txt
		for $j = 1 to $i	                                      
			!echo '$cellId[$j]' >>						$path/tmp/$1celldata[$sequence]-[$j].txt
			!echo '$physicalLayerCellIdGroup[$j]' >>	$path/tmp/$1celldata[$sequence]-[$j].txt
			!echo '$physicalLayerSubCellId[$j]' >>		$path/tmp/$1celldata[$sequence]-[$j].txt
			!echo '$tac[$j]' >>							$path/tmp/$1celldata[$sequence]-[$j].txt
			!echo '$earfcndl[$j]' >>					$path/tmp/$1celldata[$sequence]-[$j].txt
		done		
	else if $1 = source
		!echo '$enbid'	>>								$path/tmp/$1data[$sequence].txt
		!echo '$plmnid[mcc]' >>							$path/tmp/$1data[$sequence].txt
		!echo '$plmnid[mnc]' >>							$path/tmp/$1data[$sequence].txt
		!echo '$plmnid[mncLength]' >>					$path/tmp/$1data[$sequence].txt
		!echo '$outeraddress' >>	 					$path/tmp/$1data[$sequence].txt
		!echo '$inneraddress' >>	 					$path/tmp/$1data[$sequence].txt
		#$i = number of cells	                                  
		!echo '$i' >>									$path/tmp/$1data[$sequence].txt
		!echo '$xtwoldn' >>								$path/tmp/$1data[$sequence].txt
		!echo '$xtwonotcreated' >>						$path/tmp/$1data[$sequence].txt
		!echo '$xtwoopst' >>							$path/tmp/$1data[$sequence].txt
		for $j = 1 to $i	                                      
			!echo '$cellId[$j]' >>						$path/tmp/$1celldata[$sequence]-[$j].txt
			!echo '$physicalLayerCellIdGroup[$j]' >>	$path/tmp/$1celldata[$sequence]-[$j].txt
			!echo '$physicalLayerSubCellId[$j]' >>		$path/tmp/$1celldata[$sequence]-[$j].txt
			!echo '$tac[$j]' >>							$path/tmp/$1celldata[$sequence]-[$j].txt
			!echo '$earfcndl[$j]' >>					$path/tmp/$1celldata[$sequence]-[$j].txt
		done
	else if $1 = targetresult
			!echo '$xtwoldn' >>								$path/tmp/$1data[$sequence].txt
			!echo '$xtwonotcreated' >>						$path/tmp/$1data[$sequence].txt
			!echo '$xtwoopst' >>							$path/tmp/$1data[$sequence].txt	
	fi
endfunc

func fetchdata
	#$1 stands for either target or source
	#This function must be called with $1
	$lineContent = 								readfile($path/tmp/$1data[$sequence].txt)
	$extenbid =									$lineContent[1]
	$extplmnid[mcc] =							$lineContent[2]
	$extplmnid[mnc] =							$lineContent[3]
	$extplmnid[mncLength] =						$lineContent[4]	
	$extouteraddress =							$lineContent[5]
	$extinneraddress =							$lineContent[6]
	$noofexternalcells =						$lineContent[7]
	for $j = 1 to $noofexternalcells
		$lineContent = 							readfile($path/tmp/$1celldata[$sequence]-[$j].txt)
		$cellId[$j] =							$lineContent[1]		
		$physicalLayerCellIdGroup[$j] =			$lineContent[2]
		$physicalLayerSubCellId[$j] = 			$lineContent[3]
		$tac[$j] =								$lineContent[4]			
		$earfcndl[$j] =							$lineContent[5]
	done
endfunc

func extenbfcheck
	ma extenbf ExternalENodeBFunction enbid ^$extenbid$ 
	if $nr_of_mos = 0
		extenbfcr
	else
		for $mo in extenbf
			$extenbfldn = ldn($mo)
		done
	fi
	pv $extenbfldn
endfunc	

func extenbfcr
	$extenbfldn = $eutranwldn,ExternalENodeBFunction=$extplmnid[mcc]$extplmnid[mnc]-$extenbid
	crn $extenbfldn
	enbid $extenbid
	eNodeBPlmnId mcc=$extplmnid[mcc],mnc=$extplmnid[mnc],mncLength=$extplmnid[mncLength]
	end
endfunc

func checkipaddress
	if $ipaddress != $extinneraddress$
		set $xtwoldn administrativeState 0
		set $xtwoldn ipAddress $extinneraddress
		set $xtwoldn administrativeState 1
	fi
endfunc

func xtwocr
	crn $xtwoldn
	end
	set $xtwoldn ipAddress $extinneraddress
   #set $xtwoldn ipsecEpAddress $extouteraddress
endfunc

func admstate
	set $xtwoldn administrativeState 1
endfunc

func xtworesult
	get $xtwoldn operationalState > $xtwoopst
	if $nr_of_mos = 0
		$xtwonotcreated = 1
	fi
endfunc

func xtwocheck
	ma xtwo $extenbfldn,termpointtoenb
		for $mo in xtwo
			$xtwoldn = ldn($mo)
		done
	pr $xtwoldn
	if $nr_of_mos > 0
		get $xtwoldn ^ipaddress$ > $ipaddress
		checkipaddress
	else
		$xtwoldn = $extenbfldn,TermPointToENB=$extplmnid[mcc]$extplmnid[mnc]-$extenbid
		xtwocr
	fi
	pr $extenbfldn,TermPointToENB
	if $nr_of_mos = 0
		$xtwonotcreated = 1
	else
		lk $extenbfldn,TermPointToENB
		for $mo in lk_group
			$xtwoldn = ldn($mo)
		done
		set $xtwoldn administrativeState 1
		get $xtwoldn operationalstate > $xtwoopst
	fi
endfunc

func eutranfreqcr
	$eutranFrequencyRef = $eutranwldn,EUtranFrequency=$earfcndl[$i]
	crn $eutranFrequencyRef
		arfcnValueEUtranDl $earfcndl[$i]
	end
endfunc

func eutranfrequencyref
	mr EUtranFrequency
	ma EUtranFrequency $eutranwldn,EUtranFrequency arfcnValueEUtranDl $earfcndl[$i]
	if $nr_of_mos = 0
		eutranfreqcr
	else
		for $mo in EUtranFrequency
			$eutranFrequencyRef = ldn($mo)
		done
	fi
	pv $eutranFrequencyRef
endfunc

func externaleutrancellfddcheck
	$destination = $1
	for $i = 1 to $noofexternalcells
		pv $destination
		$externaleutrancellfdd[$i] = $extenbfldn,ExternalEUtranCellFDD=$extplmnid[mcc]$extplmnid[mnc]-$extenbid-$cellId[$i]
		$externaleutrancellfddrdn[$i] = $externaleutrancellfdd[$i] -s .*,
		pr $externaleutrancellfdd[$i]$
		if $nr_of_mos = 1 && $1 = source
			!echo '$source[$sequence]: $externaleutrancellfddrdn[$i]' >> $path/tmp/externaleutrancellfddalreadydefined.txt
		else if $nr_of_mos = 1 && $1 = target
			!echo '$target[$sequence]: $externaleutrancellfddrdn[$i]' >> $path/tmp/externaleutrancellfddalreadydefined.txt
		else
			eutranfrequencyref
			pv $externaleutrancellfdd[$i]
			crn $externaleutrancellfdd[$i]
				localCellId $cellId[$i]
				physicalLayerCellIdGroup $physicalLayerCellIdGroup[$i]
				physicalLayerSubCellId $physicalLayerSubCellId[$i]
				tac $tac[$i]
				eutranFrequencyRef $eutranFrequencyRef
			end
			addcelltoresult $destination
		fi
	done
endfunc

func addcelltoresult $destination
	$externaleutrancellfdd[$i] = $externaleutrancellfdd[$i] -s .*,
	pr $externaleutrancellfdd[$i]$
		if $nr_of_mos = 1 && $1 = source
			!echo '$source[$sequence]: $externaleutrancellfdd[$i]' >> $path/tmp/externaleutrancellfddresult.txt
		else if $nr_of_mos = 1 && $1 = target
			!echo '$target[$sequence]: $externaleutrancellfdd[$i]' >> $path/tmp/externaleutrancellfddresult.txt
		else if $nr_of_mos = 0 && $1 = source
			!echo '$source[$sequence]: ERROR! CR of $externaleutrancellfdd[$i] failed!' >> $path/tmp/externaleutrancellfddresult.txt
		else if $nr_of_mos = 0 && $1 = target
			!echo '$target[$sequence]: ERROR! CR of $externaleutrancellfdd[$i] failed!' >> $path/tmp/externaleutrancellfddresult.txt	
		fi		
endfunc